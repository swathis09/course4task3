houseDay090108 <- filter(houseDay2008, year == 2008 & month == 1 & day == 9 & (minute == 0 | minute == 10 | minute == 20 | minute == 30 | minute == 40 | minute == 50))
houseDay090108 <- filter(yrALL, year == 2008 & month == 1 & day == 9 & (minute == 0 | minute == 10 | minute == 20 | minute == 30 | minute == 40 | minute == 50))
library(dplyr)
houseDay2008 <- filter(yrALL, year == 2008 & month == 1 & day == 9)
plot_ly(houseDay2008, x = ~houseDay2008$DateTime, y = ~houseDay2008$Sub_metering_1, type = 'scatter', mode = 'lines')
plot_ly(houseDay2008, x = ~houseDay2008$DateTime, y = ~houseDay2008$Sub_metering_1, name = 'Kitchen', type = 'scatter', mode = 'lines') %>%
add_trace(y = ~houseDay2008$Sub_metering_2, name = 'Laundry Room', mode = 'lines') %>%
add_trace(y = ~houseDay2008$Sub_metering_3, name = 'Water Heater & AC', mode = 'lines') %>%
layout(title = "Power Consumption January 9th, 2008",
xaxis = list(title = "Time"),
yaxis = list (title = "Power (watt-hours)"))
houseDay090108 <- filter(yrALL, year == 2008 & month == 1 & day == 9 & (minute == 0 | minute == 10 | minute == 20 | minute == 30 | minute == 40 | minute == 50))
houseDay090108 <- filter(yrALL, year == 2008 & month == 1 & day == 9 & (minutes == 0 | minutes == 10 |
minutes == 20 | minutes == 30 | minutes == 40 | minutes == 50))
plot_ly(houseDay090108, x = ~houseDay090108$DateTime, y = ~houseDay090108$Sub_metering_1, name = 'Kitchen', type = 'scatter', mode = 'lines') %>%
add_trace(y = ~houseDay090108$Sub_metering_2, name = 'Laundry Room', mode = 'lines') %>%
add_trace(y = ~houseDay090108$Sub_metering_3, name = 'Water Heater & AC', mode = 'lines') %>%
layout(title = "Power Consumption January 9th, 2008",
xaxis = list(title = "Time"),
yaxis = list (title = "Power (watt-hours)"))
houseYrAllWeekly <- filter(yrALL, weekday == 2 & hour == 20 & minutes == 1)
TsSub3weeklyH20M1 <- ts(houseYrAllWeekly$Sub_metering_3, frequency=52, start=c(2007,1))
autoplot(TsSub3weeklyH20M1)
autoplot(TsSub3weeklyH20M1, ts.colour = 'red', xlab = "Time", ylab = "Watt Hours", main = "Sub-meter 3")
plot.ts(TsSub3weeklyH20M1)
autoplot(TsSub3weeklyH20M1, ts.colour = 'red', xlab = "Time", ylab = "Watt Hours", main = "Sub-meter 3",
title="Sub-meter 3 ,weekday=2,")
autoplot(TsSub3weeklyH20M1, ts.colour = 'red', xlab = "Time", ylab = "Watt Hours", main = "Sub-meter 3",
title="Sub-meter 3")
autoplot(TsSub3weeklyH20M1)
autoplot(TsSub3weeklyH20M1, ts.colour = 'red', xlab = "Time", ylab = "Watt Hours", main = "Sub-meter 3",
title="Sub-meter 3 20:01 hours run every week")
autoplot(TsSub3weeklyH20M1, ts.colour = 'red', xlab = "Time", ylab = "Watt Hours", main = "Sub-meter 3",
title="Sub-meter 320:01 hours run every week")
autoplot(TsSub3weeklyH20M1, ts.colour = 'red', xlab = "Time", ylab = "Watt Hours", main = "Sub-meter 3",
title="Sub-met 320:01 hours run every week")
autoplot(TsSub3weeklyH20M1, ts.colour = 'red', xlab = "Time", ylab = "Watt Hours",
main = "Sub-met 320:01 hours run every week")
autoplot(TsSub3weeklyH20M1, ts.colour = 'red', xlab = "Time", ylab = "Watt Hours",
main = "Sub-met 3 run 20:01 hours  every week")
TsSub2weeklyH20M1 <- ts(houseYrAllWeekly$Sub_metering_2, frequency=52, start=c(2007,1))
TsSub2weeklyH20M1 <- ts(houseYrAllWeekly$Sub_metering_2, frequency=52, start=c(2007,1))
autoplot(TsSub2weeklyH20M1, ts.colour = 'blue', xlab = "Time", ylab = "Watt Hours",
main = "Sub-met 3 run 20:01 hours  every week")
autoplot(TsSub2weeklyH20M1, ts.colour = 'blue', xlab = "Time", ylab = "Watt Hours",
main = "Sub-meter 3 run 20:01 hours  every week")
TsSub2weeklyH20M1 <- ts(houseYrAllWeekly$Sub_metering_2, frequency=12, start=c(2007,1))
autoplot(TsSub2weeklyH20M1, ts.colour = 'blue', xlab = "Time", ylab = "Watt Hours",
main = "Sub-meter 3 run 20:01 hours  every week")
TsSub2weeklyH20M1 <- ts(houseYrAllWeekly$Sub_metering_2, frequency=52, start=c(2007,1))
autoplot(TsSub2weeklyH20M1, ts.colour = 'blue', xlab = "Time", ylab = "Watt Hours",
main = "Sub-meter 3 run 20:01 hours  every week")
TsSub2weeklyH20M1 <- ts(houseYrAllWeekly$Sub_metering_2, frequency=100, start=c(2007,1))
autoplot(TsSub2weeklyH20M1, ts.colour = 'blue', xlab = "Time", ylab = "Watt Hours",
main = "Sub-meter 3 run 20:01 hours  every week")
TsSub2weeklyH20M1 <- ts(houseYrAllWeekly$Sub_metering_2, frequency=52, start=c(2007,1))
autoplot(TsSub2weeklyH20M1, ts.colour = 'blue', xlab = "Time", ylab = "Watt Hours",
main = "Sub-meter 3 run 20:01 hours  every week")
TsSub1weeklyH20M1 <- ts(houseYrAllWeekly$Sub_metering_1, frequency=52, start=c(2007,1))
autoplot(TsSub2weeklyH20M1, ts.colour = 'blue', xlab = "Time", ylab = "Watt Hours",
main = "Sub-meter 3 run 20:01 hours  every week")
TsSub2weeklyH20M1 <- ts(houseYrAllWeekly$Sub_metering_2, frequency=52, start=c(2007,1))
autoplot(TsSub2weeklyH20M1, ts.colour = 'blue', xlab = "Time", ylab = "Watt Hours",
main = "Sub-meter 2 run 20:01 hours  every week")
TsSub1weeklyH20M1 <- ts(houseYrAllWeekly$Sub_metering_1, frequency=52, start=c(2007,1))
autoplot(TsSub2weeklyH20M1, ts.colour = 'blue', xlab = "Time", ylab = "Watt Hours",
main = "Sub-meter 1 run 20:01 hours  every week")
TsSub2weeklyH20M1 <- ts(houseYrAllWeekly$Sub_metering_2, frequency=52, start=c(2007,1))
autoplot(TsSub2weeklyH20M1, ts.colour = 'blue', xlab = "Time", ylab = "Watt Hours",
main = "Sub-meter 2 run 20:01 hours  every week")
TsSub2weeklyH20M1 <- ts(houseYrAllWeekly$Sub_metering_2, frequency=12, start=c(2007,1))
autoplot(TsSub2weeklyH20M1, ts.colour = 'blue', xlab = "Time
main = "Sub-meter 2 run 20:01 hours  every week")
TsSub2weeklyH20M1 <- ts(houseYrAllWeekly$Sub_metering_2, frequency=12, start=c(2007,1))
autoplot(TsSub2weeklyH20M1, ts.colour = 'blue', xlab = "Time
TsSub2weeklyH20M1 <- ts(houseYrAllWeekly$Sub_metering_2, frequency=12, start=c(2007,1))
autoplot(TsSub2weeklyH20M1, ts.colour = 'blue', xlab = "Time", ylab = "Watt Hours",
main = "Sub-meter 2 run 20:01 hours  every week")
TsSub2weeklyH20M1 <- ts(houseYrAllWeekly$Sub_metering_2, frequency=12, start=c(2007,1))
autoplot(TsSub2weeklyH20M1, ts.colour = 'blue', xlab = "Time", ylab = "Watt Hours",
main = "Sub-meter 2 run 20:01 hours  every week")
TsSub1weeklyH20M1 <- ts(houseYrAllWeekly$Sub_metering_1, frequency=12, start=c(2007,1))
autoplot(TsSub2weeklyH20M1, ts.colour = 'green', xlab = "Time", ylab = "Watt Hours",
main = "Sub-meter 1 run 20:01 hours  every week")
TsSub2weeklyH20M1 <- ts(houseYrAllWeekly$Sub_metering_2, frequency=12, start=c(2007,1))
autoplot(TsSub2weeklyH20M1, ts.colour = 'blue', xlab = "Time", ylab = "Watt Hours",
main = "Sub-meter 2 run 20:01 hours  every week")
TsSub1weeklyH20M1 <- ts(houseYrAllWeekly$Sub_metering_1, frequency=12, start=c(2007,1))
autoplot(TsSub2weeklyH20M1, ts.colour = 'green', xlab = "Time", ylab = "Watt Hours",
main = "Sub-meter 1 run 20:01 hours  every week")
TsSub2weeklyH20M1 <- ts(houseYrAllWeekly$Sub_metering_2, frequency=12, start=c(2007,1))
autoplot(TsSub2weeklyH20M1, ts.colour = 'blue', xlab = "Time", ylab = "Watt Hours",
main = "Sub-meter 2 run 20:01 hours  every week")
TsSub1weeklyH20M1 <- ts(houseYrAllWeekly$Sub_metering_1, frequency=12, start=c(2007,1))
autoplot(TsSub2weeklyH20M1, ts.colour = 'green', xlab = "Time", ylab = "Watt Hours",
main = "Sub-meter 1 run 20:01 hours  every week")
TsSub1weeklyH20M1 <- ts(houseYrAllWeekly$Sub_metering_1, frequency=12, start=c(2007,1))
autoplot(TsSub1weeklyH20M1, ts.colour = 'green', xlab = "Time", ylab = "Watt Hours",
main = "Sub-meter 1 run 20:01 hours  every week")
autoplot(TsSub2weeklyH20M1, ts.colour = 'blue', xlab = "Time", ylab = "Watt Hours",
main = "Sub-meter 2 run 20:01 hours  every week")
autoplot(TsSub1weeklyH20M1, ts.colour = 'green', xlab = "Time", ylab = "Watt Hours",
main = "Sub-meter 1 run 20:01 hours  every week")
install.packages("forecast")
library(forecast)
summary(TsSub3weeklyH20M1)
str(TsSub3weeklyH20M1)
fitSM3 <- tslm(TsSub3weeklyH20M1 ~ trend + season)
summary(fitSM3)
forecastfitSM3 <- forecast(fitSM3, h=20)
plot(forecastfitSM3)
tail(yrALL)
house070809weekly <- filter(yourData,(year == 2007 | year == 2008 | year == 2009 )& weekDay == 2 & hour == 20
& minutes == 1)
house070809weekly <- filter(yrALL,(year == 2007 | year == 2008 | year == 2009 )& weekDay == 2 & hour == 20
& minutes == 1)
house070809weekly <- filter(yrALL,(year == 2007 | year == 2008 | year == 2009 )& weekday == 2 & hour == 20
& minutes == 1)
tsSM3_070809weekly <- ts(house070809weekly$Sub_metering_3, frequency=52, start=c(2007,1))
autoplot(tsSM3_070809weekly, ts.colour = 'red', xlab = "Time", ylab = "Watt Hours", main = "Sub-meter 3")
library(ggplot2)
library(ggfortify)
autoplot(tsSM3_070809weekly, ts.colour = 'red', xlab = "Time", ylab = "Watt Hours", main = "Sub-meter 3")
library(caret)
library(ggplot2)
set.seed(32)
trainingData <- read.csv("~/Data Analytics Certification/Course3/Task 3/UJIndoorLoc/trainingData.csv", header=FALSE, stringsAsFactors=FALSE)
View(trainingData)
trainingData <- read.csv("~/Data Analytics Certification/Course3/Task 3/UJIndoorLoc/trainingData.csv", stringsAsFactors=FALSE)
View(trainingData)
trainingData <- read.csv("~/Data Analytics Certification/Course3/Task 3/UJIndoorLoc/trainingData.csv",
stringsAsFactors=FALSE)
trainingData <- read.csv("~/Data Analytics Certification/Course3/Task 3/UJIndoorLoc/trainingData.csv",
,header=TRUE,stringsAsFactors=FALSE)
View(trainingData)
summary(trainingData)
str(trainingData)
library(caret)
library(ggplot2)
set.seed(32)
trainingData <- read.csv("~/Data Analytics Certification/Course3/Task 3/UJIndoorLoc/trainingData-USE.csv",
,header=TRUE,stringsAsFactors=FALSE)
View(trainingData)
summary(trainingData)
str(trainingData)
View(trainingData)
summary(trainingData)
str(trainingData)
trainingData <-cbind(trainingData,paste(trainingData$BUILDINGID,trainingData$FLOOR,trainingData$SPACEID,trainingData$RELATIVEPOSITION),
stringsAsFactors=TRUE)
str(trainingData)
colnames(trainingData)['TJ'] <-"Y"
colnames(trainingData)[530] <-"Y"
View(trainingData)
trainingData <- trainingData[,c(ncol(trainingData), 1:(ncol(trainingData)-1))]
View(trainingData)
str(trainingData)
plot(trainingData$BUILDINGID)
plot(trainingData$FLOOR)
plot(trainingData$SPACEID)
plot(trainingData$RELATIVEPOSITION)
plot(trainingData$Y)
BUILDINGID
summary(trainingData)
str(trainingData)
trainingData$BUILDINGID<-NULL
str(trainingData)
trainingData$FLOOR<-NULL
trainingData$SPACEID<-NULL
trainingData$RELATIVEPOSITION<-NULL
str(trainingData)
library(dplyr)
## Combine floor,building,space and relative id
trainingData <-cbind(trainingData,paste(trainingData$BUILDINGID,trainingData$FLOOR,trainingData$SPACEID,trainingData$RELATIVEPOSITION),
stringsAsFactors=TRUE)
## Give the new attribute column a header name
colnames(trainingData)[530] <-"Y"
#move the attribute
trainingData <- trainingData[,c(ncol(trainingData), 1:(ncol(trainingData)-1))]
str(trainingData)
trainingData <- read.csv("~/Data Analytics Certification/Course3/Task 3/UJIndoorLoc/trainingData-USE.csv",
header=TRUE,stringsAsFactors=FALSE)
## Combine floor,building,space and relative id
trainingData <-cbind(trainingData,paste(trainingData$BUILDINGID,trainingData$FLOOR,trainingData$SPACEID,trainingData$RELATIVEPOSITION),
stringsAsFactors=TRUE)
colnames(trainingData)[530] <-"Y"
trainingData <- trainingData[,c(ncol(trainingData), 1:(ncol(trainingData)-1))]
str(trainingData)
plot(trainingData$BUILDINGID)
trainingData_B1 <- filter(trainingData, BUILDINGID == 0)
str(trainingData_B1)
trainingData_B0 <- filter(trainingData, BUILDINGID == 0)
str(trainingData_B0)
trainingData_B1 <- filter(trainingData, BUILDINGID == 1)
str(trainingData_B1)
trainingData_B2 <- filter(trainingData, BUILDINGID == 2)
str(trainingData_B2)
View(trainingData)
trainingData_B0$BUILDINGID<-NULL
trainingData_B0$FLOOR<-NULL
trainingData_B0$SPACEID<-NULL
trainingData_B0$RELATIVEPOSITION<-NULL
head(trainingData_B0)
inTraining <- createDataPartition(trainingData_B0$Y, p = .75, list = FALSE)
inTraining_0 <- createDataPartition(trainingData_B0$Y, p = .75, list = FALSE)
training_0 <- readyData[inTraining,]
testing_0 <- readyData[-inTraining,]
training_0 <- trainingData_B0[inTraining,]
testing_0 <- trainingData_B0[-inTraining,]
fitControl_0 <- trainControl(method = "repeatedcv", number = 10, repeats = 1)
C5_Fit_0 <- train(Y~., data = training, method = "C5.0", trControl=fitControl, tuneLength = 5)
C5_Fit_0 <- train(Y~., data = training_0, method = "C5.0", trControl=fitControl, tuneLength = 5)
str(trainingData_B0)
str(trainingData_B1)
inTraining_0 <- createDataPartition(trainingData_B0$Y, p = .75, list = FALSE)
str(inTraining_0)
str(trainingData_B0)
str(trainingData)
droplevels(trainingData_B0)
str(trainingData_B0)
str(trainingData_B0)
droplevels(trainingData_B0)
str(trainingData_B0)
droplevels.factor(trainingData_B0)
str(trainingData_B0)
droplevels(trainingData_B0)
str(trainingData_B0)
droplevels(trainingData_B1)
str(trainingData_B1)
droplevels(trainingData_B0$Y)
str(trainingData_B0)
trainingData <-cbind(trainingData,paste(trainingData$BUILDINGID,trainingData$FLOOR,trainingData$SPACEID,trainingData$RELATIVEPOSITION),
stringsAsFactors=TRUE)
trainingData_B0 <- filter(trainingData, BUILDINGID == 0)
trainingData_B1 <- filter(trainingData, BUILDINGID == 1)
trainingData_B2 <- filter(trainingData, BUILDINGID == 2)
trainingData_B0 <-cbind(trainingData,paste(trainingData_B0$BUILDINGID,trainingData_B0$FLOOR,trainingData_B0$SPACEID,trainingData_B0$RELATIVEPOSITION),
stringsAsFactors=TRUE)
trainingData_B0 <-cbind(trainingData,paste(trainingData_B0$BUILDINGID,trainingData_B0$FLOOR,trainingData_B0$SPACEID,trainingData_B0$RELATIVEPOSITION),
stringsAsFactors=TRUE)
trainingData_B0 <-cbind(trainingData,paste(trainingData_B0$BUILDINGID,trainingData_B0$FLOOR,trainingData_B0$SPACEID,trainingData_B0$RELATIVEPOSITION),
stringsAsFactors=FALSE)
trainingData_B0 <-cbind(trainingData,paste(trainingData_B0$BUILDINGID,trainingData_B0$FLOOR,
trainingData_B0$SPACEID,trainingData_B0$RELATIVEPOSITION)
d
trainingData_B0 <-cbind(trainingData,paste(trainingData_B0$BUILDINGID,trainingData_B0$FLOOR,
trainingData_B0$SPACEID,trainingData_B0$RELATIVEPOSITION))
trainingData_B0 <-cbind(trainingData_B0,paste(trainingData_B0$BUILDINGID,trainingData_B0$FLOOR,
trainingData_B0$SPACEID,trainingData_B0$RELATIVEPOSITION))
)
trainingData <- read.csv("~/Data Analytics Certification/Course3/Task 3/UJIndoorLoc/trainingData-USE.csv",
header=TRUE,stringsAsFactors=FALSE)
trainingData <-cbind(trainingData,paste(trainingData$BUILDINGID,trainingData$FLOOR,trainingData$SPACEID,trainingData$RELATIVEPOSITION),
stringsAsFactors=TRUE)
colnames(trainingData)[530] <-"Y"
trainingData <- trainingData[,c(ncol(trainingData), 1:(ncol(trainingData)-1))]
trainingData <- trainingData[,c(ncol(trainingData), 1:(ncol(trainingData)-1))]
trainingData_B0 <- filter(trainingData, BUILDINGID == 0)
str(trainingData_B0)
trainingData_B1 <- filter(trainingData, BUILDINGID == 1)
str(trainingData_B1)
trainingData_B2 <- filter(trainingData, BUILDINGID == 2)
str(trainingData_B2)
trainingData_B0$BUILDINGID<-NULL
trainingData_B0$FLOOR<-NULL
trainingData_B0$SPACEID<-NULL
trainingData_B0$RELATIVEPOSITION<-NULL
droplevels(trainingData_B0$Y)
str(trainingData_B0)
trainingData <- read.csv("~/Data Analytics Certification/Course3/Task 3/UJIndoorLoc/trainingData-USE.csv",
header=TRUE,stringsAsFactors=FALSE)
View(trainingData)
summary(trainingData)
str(trainingData)
## Combine floor,building,space and relative id
trainingData <-cbind(trainingData,paste(trainingData$BUILDINGID,trainingData$FLOOR,trainingData$SPACEID,trainingData$RELATIVEPOSITION),
stringsAsFactors=TRUE)
## Give the new attribute column a header name
colnames(trainingData)[530] <-"Y"
#move the attribute
trainingData <- trainingData[,c(ncol(trainingData), 1:(ncol(trainingData)-1))]
trainingData_B0 <- filter(trainingData, BUILDINGID == 0)
str(trainingData_B0)
trainingData_B1 <- filter(trainingData, BUILDINGID == 1)
str(trainingData_B1)
trainingData_B2 <- filter(trainingData, BUILDINGID == 2)
str(trainingData_B2)
droplevels(trainingData_B0$Y)
droplevels(trainingData_B1)
str(trainingData_B1)
drop.levels(trainingData_B0)
install.packages("g.data")
library(g.data) # for drop levels as its not working
drop.levels(trainingData_B0)
drop.levels(trainingData_B0)
library(C50)
str(drop.level(trainingData_B0))
str(drop.levels(trainingData_B0))
levels(droplevels(trainingData_B0$Y))
library(caret)
library(ggplot2)
library(dplyr) #or filter and data manipulation
#library(g.data) # for drop.levels() as droplevels() is not working
library(C50)
trainingData <- read.csv("~/Data Analytics Certification/Course3/Task 3/UJIndoorLoc/trainingData-USE.csv",
header=TRUE,stringsAsFactors=FALSE)
trainingData <-cbind(trainingData,paste(trainingData$BUILDINGID,trainingData$FLOOR,trainingData$SPACEID,trainingData$RELATIVEPOSITION),
stringsAsFactors=TRUE)
colnames(trainingData)[530] <-"Y"
trainingData <- trainingData[,c(ncol(trainingData), 1:(ncol(trainingData)-1))]
trainingData_B0 <- filter(trainingData, BUILDINGID == 0)
str(trainingData_B0)
trainingData_B1 <- filter(trainingData, BUILDINGID == 1)
str(trainingData_B1)
trainingData_B2 <- filter(trainingData, BUILDINGID == 2)
str(trainingData_B2)
levels(droplevels(trainingData_B0$Y))
str(trainingData_B0)
levels(droplevels(trainingData_B0$Y))
str(trainingData_B1)
summary(trainingData)
str(trainingData)
library(g.data) # for drop.levels() as droplevels() is not working
str(drop.levels(trainingData_B0))
trainingData_B0$Y <- factor(trainingData_B0$Y)
str(trainingData_B0)
library(caret)
library(ggplot2)
library(dplyr) #or filter and data manipulation
library(g.data) # for drop.levels() as droplevels() is not working
library(C50)
library(kknn) #knn
library(class)
library(e1071)
library(knitr)#exporting script
set.seed(32)
trainingData <- read.csv("~/Data Analytics Certification/Course3/Task 3/UJIndoorLoc/trainingData-USE.csv",
header=TRUE,stringsAsFactors=FALSE)
## Combine floor,building,space and relative id
trainingData <-cbind(trainingData,paste(trainingData$BUILDINGID,trainingData$FLOOR,trainingData$SPACEID,trainingData$RELATIVEPOSITION),
stringsAsFactors=TRUE)
## Give the new attribute column a header name
colnames(trainingData)[530] <-"Y"
#move the attribute
trainingData <- trainingData[,c(ncol(trainingData), 1:(ncol(trainingData)-1))]
#check str to check the
trainingData_B0 <- filter(trainingData, BUILDINGID == 0)
str(trainingData_B0)
trainingData_B1 <- filter(trainingData, BUILDINGID == 1)
str(trainingData_B1)
trainingData_B2 <- filter(trainingData, BUILDINGID == 2)
str(trainingData_B2)
#remove the 4 attributes to avoid overfit while making predictions
trainingData_B0$BUILDINGID<-NULL
trainingData_B0$FLOOR<-NULL
trainingData_B0$SPACEID<-NULL
trainingData_B0$RELATIVEPOSITION<-NULL
trainingData_B0$LONGITUDE<-NULL
trainingData_B0$LATITUDE<-NULL
trainingData_B1$BUILDINGID<-NULL
trainingData_B1$FLOOR<-NULL
trainingData_B1$SPACEID<-NULL
trainingData_B1$RELATIVEPOSITION<-NULL
trainingData_B2$BUILDINGID<-NULL
trainingData_B2$FLOOR<-NULL
trainingData_B2$SPACEID<-NULL
trainingData_B2$RELATIVEPOSITION<-NULL
#1) Factor your y AFTER subsetting
#2) Explore using the dropLevels() function
trainingData_B0$Y<-droplevels(trainingData_B0$Y)
trainingData_B1$Y<-droplevels(trainingData_B1$Y)
trainingData_B2$Y<-droplevels(trainingData_B2$Y)
str(trainingData_B0)
inTraining_0 <- createDataPartition(trainingData_B0$Y, p = .75, list = FALSE)
#Warining:Some classes have no records.This is because of factors (u will get this errorunless u use drop
#or factor)
#str(inTraining_0)
#str(trainingData_B0)
training_0 <- trainingData_B0[inTraining_0,]
testing_0 <- trainingData_B0[-inTraining_0,]
fitControl<- trainControl(method = "repeatedcv", number = 10, repeats = 1)
#------------------aPPLY C5.0----------------------------------------------------------------------------
C5_Fit_0 <- train(Y~., data = training_0, method = "C5.0", trControl=fitControl, tuneLength = 5)
C5_Fit_0 <- train(Y~., data = training_0, method = "C5.0", trControl=fitControl, tuneLength = 2)
Predict_B0_C5<-predict(C5_Fit_0,testing_0)
#names(results) <- c("actual", "predicted")
Output_B0<-confusionMatrix(Predict_B0_C5, testing_0$Y)
Output_B0#
cmatrix_c5_B0<-as.table(Output_B0)
#accuracy and kappa ONLY-------------------------------------------------------------------
Ak<-as.matrix(Output_B0,what="overall")
Ak
SSP<-as.matrix(Output_B0, what = "classes")  # S,S,p and other metrices
SSP
write.csv(SSP, file = "~/Data Analytics Certification/Course3/Task 3/UJIndoorLoc/OUTPUT_SSP_B0.csv")
write.csv(Ak, file = "~/Data Analytics Certification/Course3/Task 3/UJIndoorLoc/OUTPUT_ak_B0.csv")
cmatrix_c5_B0
write.csv(cmatrix_c5_B0, file = "~/Data Analytics Certification/Course3/Task 3/UJIndoorLoc/OUTPUT_cmatrix_c5_B0.csv")
nn5_B0 <- train(Y~., data = training_0, method = "kknn", trControl=fitControl, tuneLength = 2)
Predict_B0_nn5<-predict(nn5_B0,testing_0)
Output_B0_nn5<-confusionMatrix(Predict_B0_nn5, testing_0$Y)
cmatrix_knn_B0<-as.table(Output_B0_nn5)
Ak_nn5<-as.matrix(Output_B0_nn5,what="overall")
Ak_nn5
SSP_nn5<-as.matrix(Output_B0_nn5, what = "classes")  # S,S,p and other metrices
SSP_nn5
write.csv(SSP_nn5, file = "~/Data Analytics Certification/Course3/Task 3/UJIndoorLoc/OUTPUT_SSP_B0_nn5.csv")
write.csv(Ak_nn5, file = "~/Data Analytics Certification/Course3/Task 3/UJIndoorLoc/OUTPUT_ak_B0_nn5.csv")
write.csv(cmatrix_knn_B0, file = "~/Data Analytics Certification/Course3/Task 3/UJIndoorLoc/OUTPUT_cmatrix_B0_nn5.csv")
rf_B0 <- train(Y~., data = training_0, method = "rf", trControl=fitControl, tuneLength = 2)
Output_B0
Output_B0_nn5
Output_B0_rf
Predict_B0_rf
rf_B0 <- train(Y~., data = training_0, method = "rf", trControl=fitControl, tuneLength = 2)
Predict_B0_rf<-predict(rf_B0,testing_0)
Output_B0_rf<-confusionMatrix(Predict_B0_rf, testing_0$Y)
Output_B0_rf
cmatrix_rf_B0<-as.table(Output_B0_rf)
Ak_rf<-as.matrix(Output_B0_rf,what="overall")
Ak_rf
SSP_rf<-as.matrix(Output_B0_rf, what = "classes")  # S,S,p and other metrices
SSP_rf
write.csv(SSP_rf, file = "~/Data Analytics Certification/Course3/Task 3/UJIndoorLoc/OUTPUT_SSP_B0_rf.csv")
write.csv(Ak_rf, file = "~/Data Analytics Certification/Course3/Task 3/UJIndoorLoc/OUTPUT_ak_B0_rf.csv")
write.csv(cmatrix_rf_B0, file = "~/Data Analytics Certification/Course3/Task 3/UJIndoorLoc/OUTPUT_cmatrix_B0_rf.csv")
write.csv(SSP_rf, file = "~/Data Analytics Certification/Course3/Task 3/UJIndoorLoc/OUTPUT_SSP_B0_rf.csv")
write.csv(Ak_rf, file = "~/Data Analytics Certification/Course3/Task 3/UJIndoorLoc/OUTPUT_ak_B0_rf.csv")
write.csv(cmatrix_rf_B0, file = "~/Data Analytics Certification/Course3/Task 3/UJIndoorLoc/OUTPUT_cmatrix_B0_rf.csv")
ModelData <- resamples(list(C50 = C5_Fit_0,kknn = nn5_B0, RF = rf_B0))
summary(ModelData)
Output_B0_rf
summary(ModelData)
SSP_rf
install.packages("pdftools")
# Required
library(doParallel)
library(plotly)
library(corrplot)#course2task3
library(caret)#nearZeroVar() ,rfe() function (recursive feature elimination), PREPROCESS()
library(dplyr)#to select only specific columns, recode()
library(C50)
library(e1071) #svm
library(kknn)
library(randomForest)
library(xgbLinear) #gradient boosting
detectCores() # Result = Typically 4 to 6
# Create Cluster with desired number of cores. Don't use them all! Your computer is running other processes.
cl <- makeCluster(2)
# Register Cluster
registerDoParallel(cl)
# Confirm how many cores are now "assigned" to R and RStudio
getDoParWorkers() # Result 2
set.seed(100)
iphoneDF <- read.csv("~/Data Analytics Certification/Course 4/Task3/iphone_smallmatrix_labeled_8d.csv",
header=TRUE,stringsAsFactors=FALSE)
View(iphoneDF)
str(iphoneDF)
summary(iphoneDF)
summary(iphoneDF$ios)
summary(iphoneDF$iphonecampos)
summary(iphoneDF$galaxtdis)
summary(iphoneDF$htcperunc )
str(iphoneDF$ios)
is.na(iphoneDF)
plot_ly(iphoneDF, x= ~iphoneDF$iphonesentiment, type='histogram')
iphoneDF <- read.csv("~/Data Analytics Certification/Course 4/Task3/iphone_smallmatrix_labeled_8d.csv",
header=TRUE,stringsAsFactors=FALSE)
str(iphoneDF$ios)
is.na(iphoneDF)
plot_ly(iphoneDF, x= ~iphoneDF$iphonesentiment, type='histogram')
setwd("~/Data Analytics Certification/Course 4/Task3")
str(iphoneDF$ios)
is.na(iphoneDF)
plot_ly(iphoneDF, x= ~iphoneDF$iphonesentiment, type='histogram')
library(plotly)
options(max.print=1000000)
corrData <- cor(iphoneDF)
corrData
## 1. Checking to see to remove features with high correlation with Y(dependent)
corrplot(corrData)
corrplot(corrData,method = "pie",number.cex = .5)
corrplot(corrData,method = "number",number.cex = .4)
plot_ly(iphoneDF, x= ~iphoneDF$iphonesentiment, type='histogram')
View(iphoneDF)
str(iphoneDF)
summary(iphoneDF)
summary(iphoneDF$ios)
summary(iphoneDF$iphonecampos)
summary(iphoneDF$galaxtdis)
summary(iphoneDF$htcperunc )
plot_ly(iphoneDF, x= ~iphoneDF$iphonesentiment, type='histogram')
setwd("~/Data Analytics Certification/Course 4/Task3")
# Required
library(doParallel)
library(plotly)
library(corrplot)#course2task3
library(caret)#nearZeroVar() ,rfe() function (recursive feature elimination), PREPROCESS()
library(dplyr)#to select only specific columns, recode()
library(C50)
library(e1071) #svm
library(kknn)
library(randomForest)
library(xgbLinear) #gradient boosting
# Find how many cores are on your machine
detectCores() # Result = Typically 4 to 6
# Create Cluster with desired number of cores. Don't use them all! Your computer is running other processes.
cl <- makeCluster(2)
# Register Cluster
registerDoParallel(cl)
# Confirm how many cores are now "assigned" to R and RStudio
getDoParWorkers() # Result 2
